{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dsnansumors.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dsnansumors( 5, x, 2, 1 );\n* // returns 5.0\n*/\nfunction dsnansumors( N, x, strideX, offsetX ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn N * x[ ix ];\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn 0.0;\n\t}\n\tsum = v;\n\tix += strideX;\n\ti += 1;\n\tfor ( ; i < N; i++ ) {\n\t\tif ( isnan( x[ ix ] ) === false ) {\n\t\t\tsum += x[ ix ];\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn sum;\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dsnansumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction dsnansumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dsnansumors from './dsnansumors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dsnansumors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dsnansumors;\n"],"names":["dsnansumors","N","x","strideX","offsetX","sum","ix","v","i","isnan","ndarray","stride2offset","setReadOnly"],"mappings":";;+TA4CA,SAASA,EAAaC,EAAGC,EAAGC,EAASC,GACpC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAO,EAGR,GADAK,EAAKF,EACY,IAAZD,EACJ,OAAKM,EAAOP,EAAGI,IACP,EAEDL,EAAIC,EAAGI,GAGf,IAAME,EAAI,EAAGA,EAAIP,IAChBM,EAAIL,EAAGI,IACa,IAAfG,EAAOF,IAFOC,IAKnBF,GAAMH,EAEP,GAAKK,IAAMP,EACV,OAAO,EAKR,IAHAI,EAAME,EACND,GAAMH,EACNK,GAAK,EACGA,EAAIP,EAAGO,KACY,IAArBC,EAAOP,EAAGI,MACdD,GAAOH,EAAGI,IAEXA,GAAMH,EAEP,OAAOE,CACR,CCrCA,SAASL,EAAaC,EAAGC,EAAGC,GAC3B,OAAOO,EAAST,EAAGC,EAAGC,EAASQ,EAAeV,EAAGE,GAClD,CCjBAS,EAAAZ,EAAA,UAAAU"}