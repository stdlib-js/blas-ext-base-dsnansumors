{"version":3,"file":"bundle.js","sources":["../07ec73d390ef1b536bcdf17011538c","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/blas-ext-base-dsnansumors/blas-ext-base-dsnansumors/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of single-precision floating-point strided array elements, ignoring `NaN` values, using ordinary recursive summation with extended accumulation, and returning an extended precision result.\n*\n* @module @stdlib/blas-ext-base-dsnansumors\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var dsnansumors = require( '@stdlib/blas-ext-base-dsnansumors' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dsnansumors( N, x, 1 );\n* // returns 1.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dsnansumors = require( '@stdlib/blas-ext-base-dsnansumors' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dsnansumors.ndarray( N, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar dsnansumors = require( './main.js' );\n\n\n// MAIN //\n\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( !(tmp instanceof Error) ) {\n\tdsnansumors = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dsnansumors;\n"],"names":["join","require","tryRequire","dsnansumors","tmp","Error","module","exports"],"mappings":";2FAAe,ICiDXA,EAAOC,QAAS,QAASD,KACzBE,EAAaD,QAAS,6BACtBE,EAAcF,QAAS,aAKvBG,EAAMF,EAAYF,EDxDP,4ECwDwB,gBAChCI,aAAeC,QACrBF,EAAcC,GAMfE,OAAOC,QAAUJ"}